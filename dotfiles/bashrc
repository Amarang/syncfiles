# .bashrc asdf

# If not running interactively, don't do anything
[ -z "$PS1" ] && return


# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi


if [ "$TERM" != "dumb" ]; then
    dircolors -b 1>/dev/null 2>/dev/null
    if (( $? == 0 )); then
        alias ls='ls --color=auto'
    else
        alias ls='ls -G'
    fi
fi

export TERM=xterm-256color

HOST=$(hostname)

# set window title to user@host
echo -ne "\033]0;${USER}@${HOST}\007"

PS="\[\033[01;34m\][\t]\[\e[0m\] \[\033[00;34m\][\u@\h]\[\e[0m\]"
if [ -n "$WINDOW" ]; then
    PS+=" \[\033[01;33m\][${STY##*.}]\[\e[0m\]"
fi
PS+=" \w \[\033[01;32m\]> "
PS+="\[\e[0m\]"
# PS+=" \w > "
export PS1=$PS

export EDITOR=vim
export NICK="nick"
#export PYTHONSTARTUP=~/.pythonrc.py

alias tmux='tmux -2' # fixes colors in vim

# this is so we can use <C-s> to forward history search without nuking the terminal
stty stop ""



# special host-dependent stuff
# cmsenv compatibility for ucsd uaf
export PATH=${PATH}:${HOME}/syncfiles/pyfiles/
if [[ ${HOST} == *uaf-* ]]; then 
    source /code/osgcode/cmssoft/cms/cmsset_default.sh
    unset SSH_ASKPASS
    export PATH=/nfs-7/texlive/2015/bin/x86_64-linux:$PATH
    export PYTHONPATH=$PYTHONPATH:/home/users/namin/Software/slideMaker
    export UCSD="true"
    # export CMSSW_GIT_REFERENCE=/cvmfs/cms.cern.ch/cmssw.git.daily
fi
if [[ ${HOST} == *squark* ]]; then 
    source ~/root/bin/thisroot.sh
fi
if [[ ${HOST} == *Nick* ]]; then 
    alias python0='/cygdrive/c/Python27/python'
    export PATH=${PATH}:/cygdrive/d/Mathematica
    export PATH=${PATH}:/cygdrive/c/Program\ Files/Wolfram\ Research/Mathematica/10.0
    # source ~/root/bin/thisroot.sh
    export DISPLAY=:0.0
fi
export PATH=${PATH}:~/syncfiles/miscfiles/

alias l='ls -l'
alias ll='ls -l'
alias lk='ls -lthr'
alias lo='ls --group-directories-first -la --sort=extension'
alias afswork='cd /afs/cern.ch/work/n/namin/public/'
alias hdp='cd /hadoop/cms/store/user/namin/ && ls -l'
alias grep='grep --color=auto'
alias ..='cd ..'
alias gridui='source /afs/cern.ch/cms/LCG/LCG-2/UI/cms_ui_env.sh'
alias ,,='echo "$PWD -> $OLDPWD" && cd $OLDPWD'
alias cd..='cd ..'
alias bc='bc -l'
alias iroot='command root'
alias root='root -b -l'
alias rot='root -b -l -q -n'
alias gridtick='grid-proxy-init -debug -verify'
alias voms='voms-proxy-init -hours 168 -voms cms'
alias crabscript='source /afs/cern.ch/cms/ccs/wm/scripts/Crab/crab.sh'
alias vrc='vim ~/.vimrc'
alias em='emacs'
alias gitcam='git commit -a -m'
alias rootenv='source ~/root/bin/thisroot.sh'
alias crabenv='source /cvmfs/cms.cern.ch/crab3/crab.sh'
alias usa='source ~/syncfiles/miscfiles/usa.sh'
alias cond='condor_q $USER'

# dirs
if [[ $HOST == *uaf-* ]]; then 
    alias fullfast="cd ~/sandbox/fullfastjets/"
    alias lumi="cd ~/dataTuple/NtupleTools/dataTuple  ; cd CMSSW*/ ; cmsenv; crabenv; cd ..; python findMissingLumis.py | tee lumiSummary.txt"
    alias ev="cd /cvmfs/cms.cern.ch/slc6_amd64_gcc530/cms/cmssw/CMSSW_8_0_11/; cmsenv; cd -"
    alias met="cd ~/2015/met/CMSSW_7_4_4_patch1/src/DataSleuth/DataSleuth/test/plotMET/; cmsenv "
    # alias ss="cd ~/2016/ss/SSAnalysis/; . setup.sh;"
    alias ss74="cd ~/2016/ss/SSAnalysis/; . setup.sh;"
    alias ss76="cd ~/2016/ss/76x/SSAnalysis/; . setup.sh;"
    alias ss80="cd ~/2016/ss/80x/SSAnalysis/; . setup.sh;"
    alias ssm="cd ~/2016/ss/master/SSAnalysis/; . setup.sh;"
    alias jec2015="cd ~/2015/jec/an2013_131/CMSSW_7_4_1_patch1/src/JetMETAnalysis/JetAnalyzers/test; cmsenv"
    alias jec="cd ~/2016/jec/CMSSW_8_0_5_patch1/src/JetMETAnalysis/JetAnalyzers/test/; cmsenv"
    alias hcal="cd ~/sandbox/halofake/CMSSW_7_4_7_scanningNick/src/; cmsenv"
    alias halo="cd ~/sandbox/halofake/CMSSW_7_4_7_scanningNick/src/; cmsenv"
    alias sm="cd ~/Software/slideMaker/; ls -lrth"
    alias sms="cd ~/2015/sms/CMSSW_7_4_1_patch4; cmsenv; cd ../crab/; source /cvmfs/cms.cern.ch/crab3/crab.sh; ls -lrth"
    alias tnp="cd ~/2015/tnp/CMSSW_7_4_2/src/TagAndProbe/Analysis; cmsenv "
    alias fr="cd ~/2016/ss/76x/SSAnalysis/; . setup.sh; cd FakeRate/measurement_region/"
    alias cell="cd ~/sandbox/cellfilter/CMSSW_7_4_6/src; cmsenv; ls -lrth"
    alias mks="cd ~/public_html/makers; ls -lrth"
    alias dis="cd ~/public_html/makers/disMaker; ls -lrth"
    alias 76x="cd /home/users/namin/2015/76x/CMSSW_7_6_1/src/CMS3/NtupleMaker/test; cmsenv; ls -lrth"
    alias new76x="cd /home/users/namin/2015/76x/new/CMSSW_7_6_1/src/CMS3/NtupleMaker/test; cmsenv; ls -lrth"
    alias 74x="cd /home/users/namin/2015/74x/CMSSW_7_4_14/src/CMS3/NtupleMaker/test; cmsenv; ls -lrth"
    alias 80x="cd ~/2016/80x_Apr8/CMSSW_8_0_3_patch1/src/CMS3/NtupleMaker/test; cmsenv; ls -lrth"
    alias duck="cd ~/duck_80x/NtupleTools/AutoTwopler"
    alias lepton="cd ~/2016/ss/LeptonBabyMaker/CMSS*/; cmsenv; cd .."

fi

if [[ $HOST == *squark* ]]; then 
    alias mks="cd ~/sandbox/makers; ls -lrth"
fi


# ssh
alias fnal='kinit -A -f namin@FNAL.GOV; ssh -2 namin@cmslpc-sl5.fnal.gov'
alias lxplus5='ssh namin@lxplus5.cern.ch'
alias lxplus='ssh namin@lxplus.cern.ch'
alias brazos='ssh amin.nj@login.brazos.tamu.edu'
alias hurr='ssh amin.nj@hurr.tamu.edu'
alias oldschool='ssh amin.nj@oldschool.tamu.edu'
alias ucsb='ssh namin@squark.physics.ucsb.edu'
alias squark='ssh namin@squark.physics.ucsb.edu'
alias io='ssh amin.nj@io.physics.tamu.edu'
alias grad='ssh namin@gshell.physics.ucsb.edu'
alias pi='ssh pi@169.231.77.67'
alias officepi='ssh pi@128.111.19.91'
#alias eos='ssh namin@eos.tamu.edu'


alias tree='tree -C'
alias stats='~/syncfiles/pyfiles/stats.py'
alias histo='~/syncfiles/pyfiles/histo.py'
alias tabletex='~/syncfiles/pyfiles/tabletex.py'
alias plottex='source ~/syncfiles/miscfiles/plottex.sh'
alias das='python ~/syncfiles/miscfiles/das/das.py'

export HISTFILESIZE=500000
export HISTSIZE=100000
export PYTHONPATH="${PYTHONPATH}:$HOME/syncfiles/pyfiles"
# Fix spelling errors for cd
shopt -s cdspell
# git config --global alias.co checkout
# git config --global alias.ci 'commit -a -m'
# Disable annoying mail messages
unset MAILCHECK
# if [ "$(uname -o 2>/dev/null)" = "Cygwin" ]; then
#alias desktop='cd /cygdrive/c/Users/Nick/Desktop'
alias d='cd ~/desktop/'
alias db='cd /cygdrive/d/dropbox/'
function say() { mplayer -really-quiet "http://translate.google.com/translate_tts?tl=en&q=$*"; }
function mailme() {
 if [ $? -eq 0 ];  then str="[UAFNotify] Command ended SUCCESSFULLY on $(date) with status code $?";  else  str="[UAFNotify] Command FAILED on $(date) with status code $?"; fi; str=$(echo $str | sed 's/:/./g'); echo "$(pwd) $(ls -lthr)" | mail -s "$str" amin.nj@gmail.com

}
function utc() {
    date -d "1970-01-01 $1 sec UTC"
}

function xwin {
# if ps | grep XWin | grep -v "grep" >& /dev/null; then
# echo "xwin already running."
startxwin >& /dev/null &
# else
# startxwin >& /dev/null &
# fi
}

# for those times when you forget you're not in vim
# and want to open things in vertical split
function vsp {
vim -O $1 $2
}

function pg {
PWD1=`pwd`
PWD2=$1
if [ -e $PWD1/$PWD2 ] ; then
  blah=$PWD1/$PWD2
  if [[ $HOST == *squark* ]]; then 
    echo `greadlink -f $blah`
  else
    echo `readlink -f $blah`
  fi
else
  if [ -e $PWD2 ]; then 
      if [[ $HOST == *squark* ]]; then 
      echo `greadlink -f $PWD2`
    else
      echo `readlink -f $PWD2`
    fi
  else
    echo "$PWD1/$PWD2 does not exist." 
  fi
fi
}

function screens {
inpName=$1
for att in $(screen -ls | grep Attached | awk '{print $1}'); do
    id=$att
    att=${att##*.}
    [ -z "$inpName" ] && echo "Attached: $att"
    if [[ $inpName == $att ]]; then
        echo "Can't attach $att because it's already open"
        return
    fi
done
for det in $(screen -ls | grep Detached | awk '{print $1}'); do
    id=$det
    det=${det##*.}
    [ -z "$inpName" ] && echo "Detached: $det"
    if [[ $inpName == $det ]]; then
        screen -r $id
        return
    fi
done
if [ ! -z "$inpName" ]; then
    echo "No screens found with that name. Making one!"
    screen -S $inpName
fi
}

function clog {
    if [ $# -gt 0 ]; then
        temp_file=$(mktemp)
        jobid=$1
        condor_history $USER -limit 20 | grep $jobid
        condor_history -l $jobid > $temp_file
        iwd=$(cat $temp_file | grep "^Iwd" | cut -d\" -f2)
        out=$(cat $temp_file | grep "^Out" | cut -d\" -f2)
        err=$(cat $temp_file | grep "^Err" | cut -d\" -f2)
        [[ "$out" == "/"* ]] || out=${iwd}/${out}
        [[ "$err" == "/"* ]] || err=${iwd}/${err}
        echo $out
        echo $err
        vim -O $out $err
        rm $temp_file
    else
        condor_history $USER -limit 20
    fi
}


function pdftopng {
#sharpen not really necessary
#convert -density 250 -trim $1 -quality 100 -sharpen 0x1.0 ${1%%.pdf}.png
if [ $# -gt 0 ]; then
    echo "$1 ==> ${1%%.pdf}.png" 
    # if [[ $HOST == *uaf-* ]]; then 
    #     gs -q -sDEVICE=pngalpha -o ${1%%.pdf}.png -sDEVICE=pngalpha -r144 $1
    # else

    density=150
    if [ $# -gt 1 ]; then
        density=$2
    fi
    convert -density ${density} -trim $1 -fuzz 1% ${1%%.pdf}.png

    # fi
else
    echo "Usage: pdftopng <pdf name> [optional density]"
fi
}
export -f pdftopng

function pdftoppt {
if [[ $* == *-h* ]]; then
    echo "Usage: pdftoppt [optional text file]"
    echo "   Optionally, a text file can be used to format the layout of the "
    echo "   slides. Each line specifies a slide, and there are 3 possible formats:"
    echo "      - 'a.pdf b.pdf' (places plots side-by-side on slide) "
    echo "      - 'a.pdf b.pdf' (places plots side-by-side on slide) "
    echo "      - 'a.pdf' (places one plot on entire slide)"
    echo "      - 'text a.pdf' (text keyword says that a textbox will "
    echo "                      take its place. Only works on left side)" 
else
    python ~/syncfiles/miscfiles/pdfppt/slides.py $*
fi
}

function alarm {
if [ $# -lt 2 ]; then
    echo "usage: alarm <seconds> <msg>"
    return 1
fi
local wait=$1
shift
(sleep $wait 2>/dev/null && echo -e "\n!!\n$*\n!!\n" && echo -e "\a" &)

}

function drop {
# drops the first n lines
if [ $# -lt 1 ]; then
    echo "usage: drop <drop #>"
    return 1
fi
n=$1
tail --lines=+$((n+1))
}

function col {
if [ $# -lt 1 ]; then
    echo "usage: col <col #>"
    return 1
fi
num=$1

if [[ $num -lt 0 ]]; then 
    awk "{print \$(NF+$((num+1)))}"
else
    awk -v x=$num '{print $x}'
fi
}

function xcp {
xrdcp root://xrootd.unl.edu/$1 $2
}
# export so this can be used in other scripts
export -f xcp

function nevts {
if [ $# -gt 1 ]; then
    if [ $# -gt 2 ]; then
        stuff='("'$1'","'$2'","'$3'")'
    else
        stuff='("'$1'","'$2'")'
    fi
else
    stuff='("'$1'")'
fi
eval "root -b -q -l '~/syncfiles/miscfiles/counts.C${stuff}' 2>&1 | grep Events | cut -d ' ' -f2"
}
# export so this can be used in other scripts
export -f nevts

function branches {
# dumps branches of root file
if [ $# -gt 1 ]; then
    stuff='("'$1'","'$2'")'
else
    stuff='("'$1'")'
fi
    
eval "root -b -q -l '~/syncfiles/miscfiles/branches.C${stuff}' | grep branch: | cut -d ' ' -f2"
}
export -f branches

function tb {
root.exe -l $* ~/syncfiles/miscfiles/browser.C -dir $(pwd)
}

function watchjob {
njobs=$(echo $@ | wc -w)
echo "Will email you when the $njobs job(s) $@ finish(es)"
nohup ~/syncfiles/miscfiles/watchjob.sh $@ &
}

function hdpfilelist {
hadoop fs -du -s /cms/store/user/${USER}/*
}

function ucsd {
if [ $# -lt 1 ]; then
    # xwin
    # ssh -X namin@uaf-10.t2.ucsd.edu
    ssh namin@uaf-10.t2.ucsd.edu
else
    ssh -X namin@uaf-${1}.t2.ucsd.edu
fi
}

function extract {
if [ -f $1 ] ; then
    case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
        *.tar.gz)    tar xvzf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar x $1       ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xvjf $1    ;;
        *.tgz)       tar xvzf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)           echo "don't know how to extract '$1'..." ;;
    esac
else
    echo "'$1' is not a valid file!"
fi
}

function web {
if [ $# -gt 0 ]; then
    chmod -R a+r $@
    if [[ $(hostname) == *uaf-* ]]; then 
        cp -rp $@ ~/public_html/dump/
    else
        scp -rp $@ ${USER}@uaf-6.t2.ucsd.edu:~/public_html/dump/
    fi
    for file in "$@"; do
        echo "uaf-6.t2.ucsd.edu/~${USER}/dump/$(basename $file)"
    done
else
    echo "Usage: web <input files>"
fi
}
export -f web

function niceplots {
. ~/syncfiles/miscfiles/niceplots.sh $@
}
export -f niceplots

function package {
if [ $# -gt 0 ]; then
    . ~/syncfiles/miscfiles/package.sh $1
else
    echo "Usage: package <folder name>"
    echo "   Optionally, a details.txt file inside the folder"
    echo "   can be used to place labels on the plots."
    echo "   For plots that you want details on, a line like"
    echo "      h1D_pt.pdf: pt of all jets"
    echo "   must be present. ':' is delimiter, and pdf name must match"
fi
}

function addnumbers {
# useful links:
# http://stackoverflow.com/a/9033109
# http://www.markkurossi.com/genscript/FAQ.html
# note that numbers.pdf is in a 4:3 aspect ratio!
if [ $# -gt 0 ]; then
    input="$1"
    output="${input}.pages"
    if [[ $* == *--wide* ]]; then
        numbersFile=numbersWide.pdf
    else
        numbersFile=numbers.pdf
    fi
    numbers="${HOME}/syncfiles/miscfiles/pdfnumbers/${numbersFile}"
    pdftk "$input" multistamp "$numbers" output "$output"
    mv $output $input
else
    echo "Usage: addnumbers <pdf file> [--wide]"
fi
}

function myip {
    curl "http://icanhazip.com/"
}
