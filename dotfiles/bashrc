# .bashrc asdf

# If not running interactively, don't do anything
[ -z "$PS1" ] && return


# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

HOST=$(hostname)
OSNAME=$(uname)

if [ "$TERM" != "dumb" ]; then
    dircolors -b 1>/dev/null 2>/dev/null
    # eval $(gdircolors ~/.dir_colors) 2>/dev/null
    if (( $? == 0 )); then
        # if [[ $(uname -a) == Darwin* ]]; then 
            # alias ls='gls --color=auto --ignore=*.{o,d,aux,pcm,cxx,d,nav,snm,pyc,toc} --ignore=AutoDict*'
        # else
            alias ls='ls --color=auto --ignore=*.{d,aux,pcm,d,nav,snm,pyc,toc} --ignore=AutoDict*'
        # fi

    else
        alias ls='ls -G'
    fi
fi

export TERM=xterm-256color


# set window title to user@host
echo -ne "\033]0;${USER}@${HOST}\007"

# function cmsswprompt {
#     cmsswpromptstr=""
#     if [ ! -z $CMSSW_VERSION ]; then
#         short=${CMSSW_VERSION#$"CMSSW_"}
#         short=${short/patch/p}
#         cmsswpromptstr=" \[\033[00;38;5;1m\][${short}]\[\e[0m\]"
#     fi
#     echo -e $cmsswpromptstr
# }

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
# blue=$(tput setaf 4)
blue="\033[38;5;117m"
bold=$(tput bold)
reset=$(tput sgr0)

PS="\[$bold$blue\][\t]\[$reset\] \[$blue\][\u@\h]\[$reset\]"
if [ -n "$WINDOW" ]; then
    PS+=" \[\033[01;33m\][${STY##*.}]\[\e[0m\]"
fi
PS+=" \w > "
PS1=$PS

export EDITOR=vim
export NICK="nick"
#export PYTHONSTARTUP=~/.pythonrc.py

alias tmux='tmux -2' # fixes colors in vim

# this is so we can use <C-s> to forward history search without nuking the terminal
stty stop ""



# special host-dependent stuff
# cmsenv compatibility for ucsd uaf
export PATH=${HOME}/syncfiles/pyfiles/:${PATH}
if [[ ${HOST} == *uaf-* ]]; then 
    source /code/osgcode/cmssoft/cms/cmsset_default.sh
    unset SSH_ASKPASS
    # export PATH=/nfs-7/texlive/2015/bin/x86_64-linux:$PATH
    export PATH=/home/users/namin/.local/bin:$PATH # for vim 8
    export PATH=/home/users/namin/.iterm2/:$PATH
    export UCSD="true"
    # export CMSSW_GIT_REFERENCE=/cvmfs/cms.cern.ch/cmssw.git.daily
fi
if [[ "$OSNAME" == "Darwin" ]]; then
    if [[ ${HOST} == *squark* ]]; then 
        source ~/root/bin/thisroot.sh
    else
        source /Applications/root_v6.12.04/bin/thisroot.sh
    fi
    alias webd='web $(ls -1rtd ~/Downloads/* | tail -n 1)'
    alias temp="~/syncfiles/miscfiles/osx-cpu-temp"
fi
export PATH=${PATH}:~/syncfiles/miscfiles/

function iterm2_set_tab_rgb() {
    echo -ne "\033]6;1;bg;red;brightness;$1\a"
    echo -ne "\033]6;1;bg;green;brightness;$2\a"
    echo -ne "\033]6;1;bg;blue;brightness;$3\a"
}
export -f iterm2_set_tab_rgb
function iterm2_set_tab_default() {
    echo -ne "\033]6;1;bg;*;default\a"
}
export -f iterm2_set_tab_default
function iterm2_set_tab_label() {
    echo -ne "\033]0;$@\a"
}
if [[ "${HOST}" == *squark* ]]; then iterm2_set_tab_label squark ; iterm2_set_tab_rgb 145 191 255; # blue
elif [[ "${HOST}" == *uaf-10.t2* ]]; then iterm2_set_tab_label uaf-10 ; iterm2_set_tab_rgb 69 221 102; # green
elif [[ "${HOST}" == *uaf-1.t2* ]]; then iterm2_set_tab_label uaf-1 ; iterm2_set_tab_rgb 255 170 32; # orange
elif [[ "${HOST}" == *uaf-8.t2* ]]; then iterm2_set_tab_label uaf-8 ; iterm2_set_tab_rgb 255 91 116; # pink/red
elif [[ "${HOST}" == *uaf-6.t2* ]]; then iterm2_set_tab_label uaf-6 ; iterm2_set_tab_rgb 166 117 161; # purple
elif [[ "${HOST}" == *uaf-7.t2* ]]; then iterm2_set_tab_label uaf-8 ; iterm2_set_tab_rgb 255 230 127; # yellow
elif [[ "${HOST}" == *lxplus* ]]; then iterm2_set_tab_label lxplus ; iterm2_set_tab_rgb 191 190 191 ; # gray
elif [[ "${HOST}" == *local* || "${HOST}" == *laptop* ]]; then iterm2_set_tab_label local ; iterm2_set_tab_default;
else iterm2_set_tab_label "???" ; iterm2_set_tab_default ; fi


alias l='ls -lG'
alias ll='ls -lG'
alias lsa='/bin/ls --color=auto'
alias lk='ls -lthrG'
alias lka='/bin/ls -lthrG --color=auto'
alias lo='ls --group-directories-first -la --sort=extension'
alias afswork='cd /afs/cern.ch/work/n/namin/public/'
alias hdp='cd /hadoop/cms/store/user/namin/ && ls -l'
alias grep='grep --color=auto'
alias ..='cd ..'
alias gridui='source /afs/cern.ch/cms/LCG/LCG-2/UI/cms_ui_env.sh'
alias ,,='echo "$PWD -> $OLDPWD" && cd $OLDPWD'
alias cd..='cd ..'
alias cdl='cd $(ls -1rtd */ | tail -1); lk'
alias bc='bc -l'
alias msquark='mosh --server=/usr/local/bin/mosh-server squark.physics.ucsb.edu --bind-server=any'
alias iroot='command root'
alias root='root -b -l'
alias rot='root -b -l -q -n'
alias gridtick='grid-proxy-init -debug -verify'
alias voms='voms-proxy-init -hours 168 -voms cms -rfc'
alias crabscript='source /afs/cern.ch/cms/ccs/wm/scripts/Crab/crab.sh'
alias vrc='vim ~/.vimrc'
alias em='emacs'
alias gam='git commit -a -m'
alias gd='git diff --color | ~/sandbox/diff-so-fancy/diff-so-fancy'
alias gp='git push'
# alias gs='git status'
alias gsu='git status --untracked-files=no'
alias rootenv='source ~/root/bin/thisroot.sh'
alias crabenv='source /cvmfs/cms.cern.ch/crab3/crab.sh'
# alias usa='source ~/syncfiles/miscfiles/usa.sh'
alias usa='source ~/syncfiles/miscfiles/nicer_usa.sh'
alias cond='condor_q $USER'
alias conda='condor_q'
alias condt='condor_q $USER -total'
alias condm='condor_q mderdzinski'
alias cstat='condor_q $USER | col 6 | drop 4 | head -n -2 | stats'
alias cstata='condor_q | col 6 | drop 4 | head -n -2 | stats'
alias dfh='df -h | grep hadoop'
alias pt='ev; ptpython'
alias xb='xargs -n 1 -I {} sh -c'
alias xbf='xargs -n 1 -P 20 -I {} sh -c'
alias mountuaf='sshfs namin@uaf-10.t2.ucsd.edu:/home/users/namin /Users/namin/sandbox/uaf  -o Compression=no,follow_symlinks,auto_cache,reconnect,defer_permissions,noappledouble'
alias aria='aria2c -j 6 -s 6 -x 6'
alias v='vim'


alias rrnd='rnd "root -l" .root'
alias rndic='rnd ic'
alias crnd='rnd cd'

# dirs
if [[ $HOST == *uaf-* ]]; then 
    alias fullfast="cd ~/sandbox/fullfastjets/"
    # alias lumi="cd ~/dataTuple/2016D/NtupleTools/dataTuple/  ; cd cms3withCondor/CMSSW*/ ; cmsenv; crabenv; cd -; python findMissingLumis.py | tee lumiSummary.txt"
    alias dt="cd ~/dataTuple/reminiaod/NtupleTools/dataTuple/"
    # alias redt="cd ~/dataTuple/rereco/NtupleTools/dataTuple/"
    alias mc="cd ~/2016/forSicheng/9Mar17"
    alias higgs="cd ~/2016/higgs/CMSSW_7_1_12/prod/GenLHEfiles/Run2Mechanism; cmsenv; . setupGenEnv.sh"
    alias ftgen="cd ~/2017/madgraph/newermg/CMSSW_7_1_12/prod/GenLHEfiles/Run2Mechanism; cmsenv; . setupGenEnv.sh"
    alias gen="cd /home/users/namin/2016/higgs/take2/gensim/CMSSW_7_1_20_patch3/crab ; cmsenv; crabenv;"
    alias jsroot="cd ~/public_html/dump/jsroot"
    alias remerge="cd ~/dataTuple/2016D/NtupleTools/dataTuple/remerge/"
    alias vdl="vim /nfs-7/userdata/dataTuple/nick/dataTuple.log"
    alias vdlm="vim /nfs-7/userdata/dataTuple/mark/dataTuple.log"
    alias vdt="tail -f /nfs-7/userdata/dataTuple/nick/dataTuple.log"
    # alias revdl="vim /nfs-7/userdata/dataTuple/nick_reproc/dataTuple.log"
    alias em="/home/users/namin/sandbox/emacs-25.1/src/emacs -nw"
    alias vdr="rm /nfs-7/userdata/dataTuple/nick/running.pid"
    alias lumi="ev; crabenv; dt; python findMissingLumis.py | tee lumiSummary.txt"
    alias ev="cd /cvmfs/cms.cern.ch/slc6_amd64_gcc493/cms/cmssw/CMSSW_8_0_20/; cmsenv; cd -"
    alias ev9="cd /cvmfs/cms.cern.ch/slc6_amd64_gcc530/cms/cmssw/CMSSW_9_2_8; cmsenv; cd -"
    alias ev74="cd /cvmfs/cms.cern.ch/slc6_amd64_gcc491/cms/cmssw/CMSSW_7_4_14/; cmsenv; cd -"
    alias met="cd ~/2015/met/CMSSW_7_4_4_patch1/src/DataSleuth/DataSleuth/test/plotMET/; cmsenv "
    # alias ss="cd ~/2016/ss/SSAnalysis/; . setup.sh;"
    alias ss74="cd ~/2016/ss/SSAnalysis/; . setup.sh;"
    alias ss76="cd ~/2016/ss/76x/SSAnalysis/; . setup.sh;"
    alias ss80="cd ~/2016/ss/80x/SSAnalysis/; . setup.sh;"
    alias ssm="cd ~/2016/ss/master/SSAnalysis/; . setup.sh"
    alias ssan="cd ~/2016/ssan/tex/notes/AN-16-386/trunk;"
    alias ssp="cd ~/2016/ssan/tex/notes/SUS-16-035/trunk;"
    alias sspp="cd ~/2016/ssan/tex/papers/SUS-16-035/trunk;"
    alias ftan="cd ~/2017/fouran/tex/notes/AN-17-115/trunk;"
    # alias ftp="cd ~/2017/fouran/tex/notes/TOP-17-009/trunk;"
    alias ftp="cd ~/2017/fouran/tex/papers/TOP-17-009/trunk;"
    alias ft="cd ~/2017/fourtop; . setup.sh"
    alias ft8="cd ~/2018/fourtop/FTAnalysis/; . setup.sh"
    alias lim="cd ~/2016/ss/master/SSAnalysis/cards; cd CMSSW_7_1_6; cmsenv; cd .."
    alias jec2015="cd ~/2015/jec/an2013_131/CMSSW_7_4_1_patch1/src/JetMETAnalysis/JetAnalyzers/test; cmsenv"
    alias jec="cd ~/2016/jec/CMSSW_8_0_5_patch1/src/JetMETAnalysis/JetAnalyzers/test/; cmsenv"
    alias hcal="cd ~/sandbox/halofake/CMSSW_7_4_7_scanningNick/src/; cmsenv"
    # alias hlt="cd /home/users/namin/2017/hlt/CMSSW_9_0_0_pre6/src/HLTrigger/Configuration/test; cmsenv"
    # alias hlt="cd /home/users/namin/2017/hlt/cms3/CMSSW_8_0_26_patch1/src/CMS3/NtupleMaker/test; cmsenv"
    alias hlt="cd ~/2017/hlt/CMSSW_8_0_24/src/HLTAnalysis/TriggerAnalyzer/python ;  cmsenv"
    alias four="ssm; cd ~/2016/ss/master/SSAnalysis/yieldsAndSRs/numericYields/tttt/baby;"
    alias halo="cd ~/sandbox/halofake/CMSSW_7_4_7_scanningNick/src/; cmsenv"
    alias jets="cd ~/2017/jets/CMSSW_8_0_26_patch1/src/CMS3/NtupleMaker/test; cmsenv "
    alias slim="cd /home/users/namin/2017/slimming/CMSSW_8_0_26_patch1/src/CMS3/NtupleMaker/test; cmsenv"
    alias slimr="cd /home/users/namin/2017/slimming/retry/CMSSW_8_0_26_patch1/src/CMS3/NtupleMaker/test; cmsenv"
    alias slimold="cd /home/users/namin/2017/slimming/old/CMSSW_8_0_26_patch1/src/CMS3/NtupleMaker/test; cmsenv"
    alias aging="cd ~/2017/csc/aging/CMSSW_8_1_0/src/DPGAnalysis/MuonSysAging/test; cmsenv"
    alias cscval="cd ~/2017/csc/cscval/CMSSW_9_1_1/src/CSCValidationRunning/AutoValidation; cmsenv"
    alias me42="cd /home/users/namin/2017/csc/me42/CMSSW_9_2_10/src/CSCValidationRunning/RecoLocalMuon/CSCValidation/src/; cmsenv"
    alias cscvalzmm="cd ~/2017/csc/cscval/CMSSW_9_1_1_patch1/src/CSCValidationRunning/RecoLocalMuon/CSCValidation/src; cmsenv"
    alias sm="cd ~/Software/slideMaker/; ls -lrth"
    alias sms="cd ~/2015/sms/CMSSW_7_4_1_patch4; cmsenv; cd ../crab/; source /cvmfs/cms.cern.ch/crab3/crab.sh; ls -lrth"
    alias tnp="cd ~/2015/tnp/CMSSW_7_4_2/src/TagAndProbe/Analysis; cmsenv "
    alias gan="cd ~/2017/gan/DY-GAN/gan/ ; ev9"
    alias fr="ssm; cd InSituFR/"
    alias cell="cd ~/sandbox/cellfilter/CMSSW_7_4_6/src; cmsenv; ls -lrth"
    alias mks="cd ~/public_html/makers; ls -lrth"
    alias tdis="cd ~/public_html/makers/test_disMaker; ls -lrth"
    alias dis="cd ~/public_html/makers/disMaker; ls -lrth"
    alias 76x="cd /home/users/namin/2015/76x/CMSSW_7_6_1/src/CMS3/NtupleMaker/test; cmsenv; ls -lrth"
    alias new76x="cd /home/users/namin/2015/76x/new/CMSSW_7_6_1/src/CMS3/NtupleMaker/test; cmsenv; ls -lrth"
    alias 74x="cd /home/users/namin/2015/74x/CMSSW_7_4_14/src/CMS3/NtupleMaker/test; cmsenv; ls -lrth"
    alias 80x="cd ~/2016/80x_Apr8/CMSSW_8_0_3_patch1/src/CMS3/NtupleMaker/test; cmsenv; ls -lrth"
    alias duck="cd ~/duck_80x/NtupleTools/AutoTwopler"
    alias moriond="cd ~/2016/moriond/NtupleTools/AutoTwopler/"
    alias ichep="cd /home/users/namin/2016/ichep/NtupleTools/AutoTwopler/"
    alias cms4="cd /home/users/namin/2017/cms4/NtupleTools/AutoTwopler"

    alias eleold="cd ~/2017/elemva/scanner/ ; ev9"
    alias ele="metis; cd ~/2017/ProjectMetis/elemva/CMSSW_8_0_28/src/electronML/Analysis/postprocessing/; source setup.sh"

    alias metis="cd ~/2017/ProjectMetis; source setup.sh"
    alias metisweb="cd ~/public_html/dump/metis_test/"
    alias mrun="cond -w | grep Metis | col 10 | cut -d'/' -f8 | stats"
    alias lepton="cd ~/2016/ss/master/LeptonBabyMaker/CMSSW_8_0_5_patch1; cmsenv ; cd ../"

    alias lu='lumi_utils.py'
    alias sb='cmsenv; cd $CMSSW_BASE ; scram b -j10; cd -'
    alias sbf='cmsenv; cd $CMSSW_BASE ; scram b -f -j10 ; cd -'

    alias mp="./make | tee temp.txt ; cat temp.txt | grep 'PDF Output file:' | cut -d: -f2 | xargs -n 1 -I {} sh -c 'web {}'";

fi

if [[ "$OSNAME" == "Darwin" ]]; then
    alias osu="mono ~/sandbox/lazer/osu/osu.Desktop/bin/Release/osu\!.exe"
    alias mks="cd ~/sandbox/makers; ls -lrth"
    alias metis="cd ~/sandbox/ProjectMetis; source setup.sh"
    alias dump="cd ~/public_html/dump/"

    bwf() {
        cd  ~/sandbox/bwf/ 
        python main.py & 
        sleep 1s
        open -a "/Applications/Google Chrome.app" "http://127.0.0.1:5000/workout"
        fg
        cd -
    }

fi


# ssh
alias fnal='kinit -A -f namin@FNAL.GOV; ssh -2 namin@cmslpc-sl5.fnal.gov'
alias lxplus5='ssh namin@lxplus5.cern.ch'
alias lxplus='ssh namin@lxplus.cern.ch'
alias brazos='ssh amin.nj@login.brazos.tamu.edu'
alias hurr='ssh amin.nj@hurr.tamu.edu'
alias oldschool='ssh amin.nj@oldschool.tamu.edu'
alias ucsb='ssh namin@squark.physics.ucsb.edu'
alias fino='ssh namin@uafino.physics.ucsb.edu'
alias squark='ssh namin@squark.physics.ucsb.edu'
alias io='ssh amin.nj@io.physics.tamu.edu'
alias grad='ssh namin@gshell.physics.ucsb.edu'
alias pi='ssh pi@192.168.0.21'
alias officepi='ssh pi@128.111.19.91'
#alias eos='ssh namin@eos.tamu.edu'
alias ela='ssh namin@ela.cscs.ch'


alias stats='~/syncfiles/pyfiles/stats.py'
alias histo='~/syncfiles/pyfiles/histo.py'
alias tabletex='~/syncfiles/pyfiles/tabletex.py'
alias plottex='source ~/syncfiles/miscfiles/plottex.sh'
alias das='python ~/syncfiles/miscfiles/das/das.py'

#Make history more useful - stolen from alex

# export PROMPT_COMMAND="history -a"
export HISTSIZE=1000000
export HISTFILESIZE=1000000
# export HISTTIMEFORMAT='%F %T '
export HISTCONTROL=ignoreboth

shopt -s cmdhist #(combine multiline commands)
shopt -s histappend #(multiple terminals all save to history)

export PYTHONPATH="$HOME/syncfiles/pyfiles:${PYTHONPATH}"
export PYTHONPATH="$HOME/syncfiles:${PYTHONPATH}"
# Fix spelling errors for cd
shopt -s cdspell
# git config --global alias.co checkout
# git config --global alias.ci 'commit -a -m'
# Disable annoying mail messages
unset MAILCHECK
alias d='cd ~/desktop/'

#Add path - stolen from Alex
pathadd(){
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then PATH="${PATH:+"$PATH:"}$1"; fi
    if [ -d "$1" ] && [[ ":$PYTHONPATH:" != *":$1:"* ]]; then PYTHONPATH="${PYTHONPATH:+"$PYTHONPATH:"}$1"; fi
    if [ -d "$1" ] && [[ ":$LD_LIBRARY_PATH:" != *":$1:"* ]]; then LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}$1"; fi
}

pkldump() {
   python -c "with open('"$1"','r') as fhin: __import__('pprint').pprint(__import__('pickle').load(fhin)$2)"
}

npdump() {
   python -c "data = __import__('numpy').load('"$1"'); print data.shape; print data"
}

pddump() {
   python -c "print __import__('pandas').DataFrame(__import__('numpy').load('"$1"')).head()"
}

wifi() {
if [[ "$OSNAME" == "Darwin" ]]; then
    /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s
fi
}

rnd() {
    local nthf=${3:-1}
    if [[ -z $2 ]]; then
        local rndf=`ls -ltr | awk '{if ($5 != 0) print $9}' | tail -n $nthf | head -n 1`
    elif [[ $2 == "*/*" ]]; then
        local rndf=`ls -ltr *${2}* | awk '{if ($5 != 0) print $9}' | tail -n $nthf | head -n 1`
    else
        local rndf=`ls -ltr | grep ${2} | awk '{if ($5 != 0) print $9}' | tail -n $nthf | head -n 1`
    fi
    if [[ $rndf != "" ]]; then
        echo "$1 $rndf"
        $1 $rndf
        history -s "$1 $rndf"
    else
        echo "Fail to find any random file."
    fi
}

cl() {
    if [[ -z $1 ]]; then
        ls -ltrhG
    elif [[ -d $1 ]] || [[ $1 == '-' ]]; then
        cd $1 && ls -ltrhG
    elif [[ -f $1 ]]; then
        cd $(dirname $1) && ls -ltrhG
    else
        local des=$(echo $1 | cut -d'/' --complement -f2-)
        if [[ -d $des ]]; then
            cd $des && ls -ltrhG
            echo "\"$1\" is not a directory or file, went to \"$des\" instead"
        else
            echo "$1: No such directory or file"; return 1
        fi
    fi
}

kajobs() {
    local pid=$(jobs -p)
    if [ -n "${pid}" ]; then
        kill -9 $pid
    fi
}

tree() {
    if [[ "$OSNAME" == "Darwin" ]]; then
        tree_osx -C
    else
        tree -C
    fi
}

function hdu() {
    echo $@ | sed 's#/hadoop##g' | xargs hadoop fs -du -h
}

function hdur() {
    echo $@ | sed 's#/hadoop##g' | xargs hadoop fs -du
}

function hcorrupt() {
    for thing in `echo $@ | sed 's#/hadoop##g'`; do
        hdfs fsck $thing | grep "CORRUPT blockpool" | grep "/cms/store" | cut -d ':' -f 1
    done
}

function mjobs() {
    # cond -w | grep ProjectMetis | col 10 | cut -d '/' -f8 | pyline.py 'x.split("_Tune")[0].split("-PromptReco")[0]' | stats
    # cond -w | grep ProjectMetis | col 10 | pyline.py 'x.split("Metis/")[1].split("_Tune")[0].split("_13TeV")[0].split("/MINIAOD")[0]' | stats
    cond -w -const 'taskname =!= UNDEFINED' | grep hadoop | col 10 | pyline.py 'x.split("_Tune")[0].split("_13TeV")[0].split("_MINIAOD")[0].rstrip("/").rsplit("/")[-1]' | stats
}

function dtprogress1() {
    base="/home/users/namin/dataTuple/reminiaod/NtupleTools/dataTuple"
    # if we're sweeprooting files on notDoneList
    echo "$(grep -n $(tail /nfs-7/userdata/dataTuple/nick/dataTuple.log -n 50 | tac | grep '/store/data/' | head -n 1 | sed -n 's#.*\(/store/data/[A-Za-z0-9\/\_\.-]\+\).*#\1#p') ${base}/notDoneList.txt | cut -d: -f1)" $(wc -l ${base}/notDoneList.txt | cut -d' ' -f1)
    
}

function dtprogress2() {
    base="/home/users/namin/dataTuple/reminiaod/NtupleTools/dataTuple"
    # if we're submitting files
    echo "$(tail /nfs-7/userdata/dataTuple/nick/dataTuple.log -n 50 | tac | grep "^submitting" | awk '{print $5}' | head -n 1)" $(wc -l ${base}/filesToSubmit.txt | cut -d' ' -f1)
}

# function say() { mplayer -really-quiet "http://translate.google.com/translate_tts?tl=en&q=$*"; }
function mailme() {
if [ $? -eq 0 ]
then str="[UAFNotify] Command ended SUCCESSFULLY on $(date) with status code $?"
else str="[UAFNotify] Command FAILED on $(date) with return value $?"
fi
if [ ! -z "$1" ]; then str="[UAFNotify] $1"; fi
str=$(echo $str | sed 's/:/./g')
echo "$(pwd) $(ls -lthr)" | mail -s "$str" amin.nj@gmail.com
}
function utc {
    if [[ "$OSNAME" == "Darwin" ]]; then
        date -r $1
    else
        date -d "1970-01-01 $1 sec UTC"
    fi
}

function quad {
    python -c "from errors import E; print (E(0.0,$1)+E(0.0,$2)).err"
}

function xwin {
# if ps | grep XWin | grep -v "grep" >& /dev/null; then
# echo "xwin already running."
startxwin >& /dev/null &
# else
# startxwin >& /dev/null &
# fi
}

# for those times when you forget you're not in vim
# and want to open things in vertical split
function vsp {
vim -O $1 $2
}

function show_and_add_to_clipboard {
if [ -n "$WINDOW" ]; then
    echo -e "\033P\033\033]1337;CopyToClipboard=;\aIWANTTOCOPYTHISNOW\033\033]1337;EndCopy\a\033\\" # for screen
    # echo -e "\033Ptmux;\033\033]1337;CopyToClipboard=;\aIWANTTOCOPYTHIS\033\033]1337;EndCopy\a\033\\" # for tmux
else
    echo -e "\033]1337;CopyToClipboard=;\a$@\033]1337;EndCopy\a" # for normal term
fi
}
function pg {
PWD1=`pwd`
PWD2=$1
cmd="readlink"
if [[ "$OSNAME" == "Darwin" ]]; then
    cmd="greadlink"
fi
if [ -e $PWD1/$PWD2 ] ; then
    PWD3=$PWD1/$PWD2
    show_and_add_to_clipboard `$cmd -f $PWD3`
else
    if [ -e $PWD2 ]; then 
        show_and_add_to_clipboard `$cmd -f $PWD2`
    fi
fi
}

function sc {
inpName=$1
for att in $(screen -ls | grep Attached | awk '{print $1}'); do
    id=$att
    att=${att##*.}
    [ -z "$inpName" ] && echo "Attached: $att"
    if [[ $inpName == $att ]]; then
        echo "Can't attach $att because it's already open"
        return
    fi
done
for det in $(screen -ls | grep Detached | awk '{print $1}'); do
    id=$det
    det=${det##*.}
    [ -z "$inpName" ] && echo "Detached: $det"
    if [[ $inpName == $det ]]; then
        screen -r $id
        return
    fi
done
if [ ! -z "$inpName" ]; then
    echo "No screens found with that name. Making one!"
    screen -S $inpName
fi
}
# and also do the autocompletions for screens! :)
_screenscomp() {
    screennames=$(sc | grep ":" | cut -d ' ' -f2)
    COMPREPLY=( $(compgen -W "${screennames}" -- ${COMP_WORDS[COMP_CWORD]}) )
}
complete -F _screenscomp sc

function cw {
    # condor_q $USER -const 'JobStatus==2' -l | grep MATCH_GLIDEIN_SiteWMS_Slot | cut -d'@' -f2 | cut -d'"' -f1 | sort
    condor_q $USER $1 -const 'JobStatus==2' -l | grep RemoteHost | rev | cut -d '@' -f1 | rev | cut -d '"' -f1 | cut -d '-' -f1
}
function cwh {
    cw | cut -d'-' -f1 | stats
}
function cweach {
    condor_q $USER $1 -const 'JobStatus==2' -l | grep -E "(^ClusterId =|RemoteHost)" | cut -d '=' -f2 | xargs -n 2
}

function clog {
    num=20
    # if number is less than 10k, then it can't be a condor_id, so
    # use it as the number of entries to show, otherwise use it
    # as condor_id
    if [ $# -gt 0 ]; then 
        num=$(echo $1 | sed 's/\.0//')
    fi
    if  [[ $# -gt 0 && "$num" -gt 10000 ]]; then
        temp_file=$(mktemp)
        jobid=$1
        # condor_history $USER -limit $num | grep $jobid
        # condor_history $USER -limit 100 | grep $jobid
        condor_history -l $jobid -limit 1 > $temp_file
        iwd=$(cat $temp_file | grep "^Iwd" | cut -d\" -f2)
        out=$(cat $temp_file | grep "^Out" | cut -d\" -f2)
        err=$(cat $temp_file | grep "^Err" | cut -d\" -f2)
        [[ "$out" == "/"* ]] || out=${iwd}/${out}
        [[ "$err" == "/"* ]] || err=${iwd}/${err}
        echo $out
        echo $err
        vim -O $out $err
        rm $temp_file
    else
        # condor_history $USER -limit 100
        condor_history $USER -limit $num
    fi
}

function condh {
    condor_q -l $1 | grep -i "hold"
}


function pdftoppt {
if [[ $* == *-h* ]]; then
    echo "Usage: pdftoppt [optional text file]"
    echo "   Optionally, a text file can be used to format the layout of the "
    echo "   slides. Each line specifies a slide, and there are 3 possible formats:"
    echo "      - 'a.pdf b.pdf' (places plots side-by-side on slide) "
    echo "      - 'a.pdf b.pdf' (places plots side-by-side on slide) "
    echo "      - 'a.pdf' (places one plot on entire slide)"
    echo "      - 'text a.pdf' (text keyword says that a textbox will "
    echo "                      take its place. Only works on left side)" 
else
    python ~/syncfiles/miscfiles/pdfppt/slides.py $*
fi
}

function alarm {
if [ $# -lt 2 ]; then
    echo "usage: alarm <seconds> <msg>"
    return 1
fi
local wait=$1
shift
(sleep $wait 2>/dev/null && echo -e "\n!!\n$*\n!!\n" && echo -e "\a" &)

}

function drop {
# drops the first n lines
if [ $# -lt 1 ]; then
    echo "usage: drop <drop #>"
    return 1
fi
n=$1
tail --lines=+$((n+1))
}

function col {
if [ $# -lt 1 ]; then
    echo "usage: col <col #>"
    return 1
fi
num=$1

if [[ $num -lt 0 ]]; then 
    awk "{print \$(NF+$((num+1)))}"
else
    awk -v x=$num '{print $x}'
fi
}

function xcp {
dest="."
if [ $# -gt 1 ]; then
    dest=$2
fi
xrdcp root://xrootd.unl.edu/$1 $dest
}
# export so this can be used in other scripts
export -f xcp

function gamp {
msg=$@
git commit -a -m $msg
git push
}

# function nevts {
# fpatt=$1
# [[ $fpatt == /store/* ]] && fpatt="root://cmsxrootd.fnal.gov//$fpatt"
# if [ $# -gt 1 ]; then
#     if [ $# -gt 2 ]; then
#         stuff='("'$fpatt'","'$2'","'$3'")'
#     else
#         stuff='("'$fpatt'","'$2'")'
#     fi
# else
#     stuff='("'$fpatt'")'
# fi
# eval "root -b -q -l '~/syncfiles/miscfiles/counts.C${stuff}' 2>&1 | grep Events | cut -d ' ' -f2"
# }
# # export so this can be used in other scripts
# export -f nevts

function branches {
# dumps branches of root file
if [ $# -gt 1 ]; then
    stuff='("'$1'","'$2'")'
else
    stuff='("'$1'")'
fi
    
eval "root -b -q -l '~/syncfiles/miscfiles/branches.C${stuff}' | grep branch: | cut -d ' ' -f2"
}
export -f branches

function tb {
root.exe -l $* ~/syncfiles/miscfiles/browser.C -dir $(pwd)
}

function watchjob {
njobs=$(echo $@ | wc -w)
echo "Will email you when the $njobs job(s) $@ finish(es)"
nohup ~/syncfiles/miscfiles/watchjob.sh $@ &
}

function hdpfilelist {
hadoop fs -du -s /cms/store/user/${USER}/*
}

function ucsd {
if [ $# -lt 1 ]; then
    # xwin
    # ssh -X namin@uaf-10.t2.ucsd.edu
    # ssh -X namin@uaf-10.t2.ucsd.edu
    ssh namin@uaf-10.t2.ucsd.edu
else
    # ssh -X namin@uaf-${1}.t2.ucsd.edu
    ssh namin@uaf-${1}.t2.ucsd.edu
fi
}

function extract {
if [ -f $1 ] ; then
    case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
        *.tar.gz)    tar xvzf $1    ;;
        *.tar.xz)    tar xvf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar x $1       ;;
        *.xz)        unxz x $1       ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xvjf $1    ;;
        *.tgz)       tar xvzf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)           echo "don't know how to extract '$1'..." ;;
    esac
else
    echo "'$1' is not a valid file!"
fi
}

function switch_git_to_ssh {
    username=$(git remote -v | grep "http" | grep "(push)" | cut -d '/' -f4)
    repo=$(git remote -v | grep "http" | grep "(push)" | cut -d '/' -f5 | cut -d ' ' -f1)
    [ ! -z $username ] && git remote set-url origin git@github.com:${username}/${repo}.git || echo "Already switched to ssh?"
}

function copy_from_there_to_here {
    for thing in `ls *`; do cp $1/$thing .; done
}

function web {
if [ $# -gt 0 ]; then
    chmod -R a+r $@
    if [[ $(hostname) == *uaf-* ]]; then 
        cp -rp $@ ~/public_html/dump/
        for file in "$@"; do
            echo "${HOSTNAME}/~${USER}/dump/$(basename $file)"
        done
    else
        scp -rp $@ ${USER}@uaf-10.t2.ucsd.edu:~/public_html/dump/
        for file in "$@"; do
            echo "uaf-10.t2.ucsd.edu/~${USER}/dump/$(basename $file)"
        done
    fi
    # if [[ -f $1 ]]; then
    #     ic $1
    # fi
else
    echo "Usage: web <input files>"
fi
}
export -f web

function uls {
    # upload latest slides
    web $(ls -1rth ~/Desktop/Slides/*pdf | tail -1)
}

# function rweb {
# if [ $# -gt 0 ]; then
#     chmod -R a+r $@
#     if [[ $(hostname) == *uaf-* ]]; then 
#         cp -rp $@ ~/public_html/dump/jsroot/files/
#     else
#         scp -rp $@ ${USER}@uaf-8.t2.ucsd.edu:~/public_html/dump/jsroot/files/
#     fi
#     for file in "$@"; do
#         echo "http://uaf-8.t2.ucsd.edu/~${USER}/dump/jsroot/index.htm?file=files/$(basename $file)"
#     done
# else
#     echo "Usage: rweb <input root files>"
# fi
# }
# export -f rweb
function rweb {
if [ $# -gt 0 ]; then
    chmod -R a+r $1
    if [[ $(hostname) == *uaf-* ]]; then 
        # cp -rp $1 ~/public_html/dump/jsroot/files/
        ln -s -f $(pwd)/$1 ~/public_html/dump/jsroot/files/
    else
        scp -rp $1 ${USER}@uaf-8.t2.ucsd.edu:~/public_html/dump/jsroot/files/
    fi
    for file in "$1"; do
        echo "http://uaf-8.t2.ucsd.edu/~${USER}/dump/jsroot/index.htm?file=files/$(basename $file)"
    done
else
    echo "Usage: rweb <input root files>"
fi
}
export -f rweb

function niceplots {
. ~/syncfiles/miscfiles/niceplots.sh $@
}
export -f niceplots

function package {
if [ $# -gt 0 ]; then
    . ~/syncfiles/miscfiles/package.sh $1
else
    echo "Usage: package <folder name>"
    echo "   Optionally, a details.txt file inside the folder"
    echo "   can be used to place labels on the plots."
    echo "   For plots that you want details on, a line like"
    echo "      h1D_pt.pdf: pt of all jets"
    echo "   must be present. ':' is delimiter, and pdf name must match"
fi
}

function addnumbers {
# useful links:
# http://stackoverflow.com/a/9033109
# http://www.markkurossi.com/genscript/FAQ.html
# note that numbers.pdf is in a 4:3 aspect ratio!
if [ $# -gt 0 ]; then
    input="$1"
    output="${input}.pages"
    if [[ $* == *--wide* ]]; then
        numbersFile=numbersWide.pdf
    else
        numbersFile=numbers.pdf
    fi
    numbers="${HOME}/syncfiles/miscfiles/pdfnumbers/${numbersFile}"
    pdftk "$input" multistamp "$numbers" output "$output"
    mv $output $input
else
    echo "Usage: addnumbers <pdf file> [--wide]"
fi
}

function myip {
    curl "http://icanhazip.com/"
}

function multiply_defined_labels {
    # inside a cms svn repo, this will find figure labels
    # that have been multiply defined (i.e., uniq -c > 1)
    grep label *tex | grep -v "%" | pyline.py 'x.split("label{")[-1].split("}")[0]' | sort  | uniq -c | sort -n
}

function remove_preliminary() {
    rename_pdf "Preliminary" "" $@
}
export -f remove_preliminary
function rename_pdf() {
    oldtext="$1"
    newtext="$2"
    shift
    shift
    for pdffile in $@; do
        echo "Processing $pdffile..."
        cp $pdffile $pdffile.bak
        pdftk $pdffile output $pdffile.tmp uncompress
        rm $pdffile
        # the LANG=C hack may or may not be needed
        LANG=C && sed -i -e "s/$oldtext/$newtext/g" $pdffile.tmp
        pdftk $pdffile.tmp output $pdffile compress
        rm -f $pdffile.tmp
        rm -f $pdffile.tmp-e
    done
}
export -f rename_pdf

function simulation_to_sp() {
    oldtext=Simulation
    newtext="Simulation Preliminary"
    for pdffile in $@; do
        echo "Processing $pdffile..."
        cp $pdffile $pdffile.bak
        pdftk $pdffile output $pdffile.tmp uncompress
        rm $pdffile
        # the LANG=C hack may or may not be needed
        LANG=C && sed -i -e "s/$oldtext/$newtext/g" $pdffile.tmp
        pdftk $pdffile.tmp output $pdffile compress
        rm -f $pdffile.tmp
        rm -f $pdffile.tmp-e
    done
}


[ -f ~/.fzf.bash ] && source ~/.fzf.bash
if [ -d ~/.bash_completion.d ]; then
  for file in ~/.bash_completion.d/*; do
    . $file
  done
fi
